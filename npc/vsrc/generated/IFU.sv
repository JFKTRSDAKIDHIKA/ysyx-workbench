// Generated by CIRCT firtool-1.62.0
module IFU(
  input         clock,
  input         reset,
  input         io_out_ready,
  output        io_out_valid,
  output [31:0] io_out_bits_inst,
  output [31:0] io_out_bits_pc,
  input  [2:0]  io_pc_sel,
  input  [31:0] io_jump_reg_target,
  input  [31:0] io_br_target,
  input  [31:0] io_jmp_target,
  input         io_pc_wen,
  input         io_lsu_axi_resp_err,
  output [31:0] io_memory_ar_addr,
  output        io_memory_ar_valid,
  input         io_memory_ar_ready,
  input  [31:0] io_memory_r_data,
  input         io_memory_r_valid,
  output        io_memory_r_ready,
  output        io_arbiter_valid,
  input         io_arbiter_ready,
  output [31:0] io_pc_debug,
  output [31:0] io_inst_debug,
  output [2:0]  io_ifu_state_debug
);

  reg  [31:0] pc;
  reg  [31:0] if_inst_buffer;
  reg  [2:0]  state;
  wire        _GEN = state == 3'h0;
  wire        _GEN_0 = state == 3'h2;
  wire        _GEN_1 = state == 3'h1;
  wire        _GEN_2 = state == 3'h3;
  wire        _GEN_3 = _GEN_0 | _GEN_1;
  wire        _GEN_4 = _GEN | _GEN_3;
  wire        _GEN_5 = state == 3'h4;
  wire        _GEN_6 = _GEN | ~(_GEN_0 | ~(_GEN_1 | _GEN_2 | _GEN_5));
  wire [31:0] io_inst_debug_0 = _GEN_6 ? if_inst_buffer : 32'h0;
  always @(posedge clock) begin
    if (reset) begin
      pc <= 32'h30000000;
      if_inst_buffer <= 32'h0;
      state <= 3'h1;
    end
    else begin
      if (io_pc_wen) begin
        if (io_pc_sel == 3'h4)
          pc <= 32'h0;
        else if (io_pc_sel == 3'h2)
          pc <= io_jmp_target;
        else if (io_pc_sel == 3'h1)
          pc <= io_br_target;
        else if (io_pc_sel == 3'h3)
          pc <= io_jump_reg_target;
        else
          pc <= pc + 32'h4;
      end
      if (_GEN_4 | ~(_GEN_2 & io_memory_r_valid)) begin
      end
      else
        if_inst_buffer <= io_memory_r_data;
      if (_GEN) begin
        if (io_pc_wen)
          state <= 3'h2;
      end
      else if (_GEN_0) begin
        if (io_arbiter_ready)
          state <= 3'h1;
      end
      else if (_GEN_1) begin
        if (io_memory_ar_ready)
          state <= 3'h3;
      end
      else if (_GEN_2) begin
        if (io_memory_r_valid)
          state <= 3'h4;
      end
      else if (_GEN_5 & io_out_ready)
        state <= 3'h0;
    end
  end // always @(posedge)
  EBreakHandler ebreakHandler (
    .inst             (io_inst_debug_0),
    .lsu_axi_resp_err (io_lsu_axi_resp_err)
  );
  assign io_out_valid = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2) & _GEN_5;
  assign io_out_bits_inst = io_inst_debug_0;
  assign io_out_bits_pc = pc;
  assign io_memory_ar_addr = _GEN_6 ? pc : 32'h0;
  assign io_memory_ar_valid = ~(_GEN | _GEN_0) & _GEN_1;
  assign io_memory_r_ready = ~_GEN_4 & _GEN_2;
  assign io_arbiter_valid = ~_GEN & (_GEN_3 | _GEN_2);
  assign io_pc_debug = pc;
  assign io_inst_debug = io_inst_debug_0;
  assign io_ifu_state_debug = state;
endmodule

