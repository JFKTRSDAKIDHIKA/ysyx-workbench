// Generated by CIRCT firtool-1.62.0
module WBU(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [31:0] io_in_bits_inst,
  input  [31:0] io_in_bits_pc,
  input  [31:0] io_in_bits_dmem_rdata,
  input  [31:0] io_in_bits_result,
  input  [4:0]  io_in_bits_wb_addr,
  output [31:0] io_wb_data,
  output [4:0]  io_wb_addr,
  output        io_wb_wen,
  output        io_pc_wen,
  output [1:0]  io_wbu_state_debug,
  output [31:0] io_wb_data_debug,
  output        io_wb_wen_debug,
  output [1:0]  io_wb_sel_debug,
  output [31:0] io_wbu_reg_dmem_rdata_debug
);

  reg  [1:0]  state;
  wire        io_in_ready_0 = state == 2'h0 & io_in_valid;
  reg  [1:0]  casez_tmp;
  always @(*) begin
    casez (state)
      2'b00:
        casez_tmp = io_in_valid ? 2'h1 : state;
      2'b01:
        casez_tmp = 2'h2;
      2'b10:
        casez_tmp = 2'h0;
      default:
        casez_tmp = state;
    endcase
  end // always @(*)
  reg  [31:0] wbu_reg_inst;
  reg  [31:0] wbu_reg_pc;
  reg  [31:0] wbu_reg_result;
  reg  [31:0] wbu_reg_dmem_rdata;
  reg  [4:0]  wbu_reg_wb_addr;
  wire        _wb_wen_T_1 = wbu_reg_inst[6:0] == 7'h37;
  wire        _wb_wen_T_2 = wbu_reg_inst[6:0] == 7'h17;
  wire        _wb_wen_T_4 = wbu_reg_inst[6:0] == 7'h33;
  wire        _wb_wen_T_6 = wbu_reg_inst[6:0] == 7'h13;
  wire        _wb_wen_T_8 = wbu_reg_inst[6:0] == 7'h3;
  wire [1:0]  _wb_sel_T_9 =
    _wb_wen_T_8 ? 2'h3 : {_wb_wen_T_6 | _wb_wen_T_4 | _wb_wen_T_2 | _wb_wen_T_1, 1'h0};
  wire [1:0]  _wb_sel_T_13 =
    wbu_reg_inst[6:0] == 7'h73 | wbu_reg_inst[6:0] == 7'h63 ? 2'h0 : _wb_sel_T_9;
  wire        _wb_wen_T_10 = wbu_reg_inst[6:0] == 7'h6F;
  wire        _wb_wen_T_12 = wbu_reg_inst[6:0] == 7'h67;
  wire [1:0]  wb_sel = _wb_wen_T_12 | _wb_wen_T_10 ? 2'h1 : _wb_sel_T_13;
  reg  [31:0] casez_tmp_0;
  always @(*) begin
    casez (wb_sel)
      2'b00:
        casez_tmp_0 = 32'h0;
      2'b01:
        casez_tmp_0 = wbu_reg_pc + 32'h4;
      2'b10:
        casez_tmp_0 = wbu_reg_result;
      default:
        casez_tmp_0 = wbu_reg_dmem_rdata;
    endcase
  end // always @(*)
  wire        io_wb_wen_0 =
    (_wb_wen_T_12 | _wb_wen_T_10 | _wb_wen_T_8 | _wb_wen_T_6 | _wb_wen_T_4 | _wb_wen_T_2
     | _wb_wen_T_1) & state == 2'h1;
  always @(posedge clock) begin
    if (reset)
      state <= 2'h0;
    else
      state <= casez_tmp;
    if (io_in_ready_0 & io_in_valid) begin
      wbu_reg_inst <= io_in_bits_inst;
      wbu_reg_pc <= io_in_bits_pc;
      wbu_reg_result <= io_in_bits_result;
      wbu_reg_dmem_rdata <= io_in_bits_dmem_rdata;
      wbu_reg_wb_addr <= io_in_bits_wb_addr;
    end
  end // always @(posedge)
  assign io_in_ready = io_in_ready_0;
  assign io_wb_data = casez_tmp_0;
  assign io_wb_addr = wbu_reg_wb_addr;
  assign io_wb_wen = io_wb_wen_0;
  assign io_pc_wen = state == 2'h2;
  assign io_wbu_state_debug = state;
  assign io_wb_data_debug = casez_tmp_0;
  assign io_wb_wen_debug = io_wb_wen_0;
  assign io_wb_sel_debug = wb_sel;
  assign io_wbu_reg_dmem_rdata_debug = wbu_reg_dmem_rdata;
endmodule

