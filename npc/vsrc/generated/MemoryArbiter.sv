// Generated by CIRCT firtool-1.62.0
module MemoryArbiter(
  input         clock,
  input         reset,
  input  [31:0] io_ifu_ar_addr,
  input         io_ifu_ar_valid,
  output        io_ifu_ar_ready,
  output [31:0] io_ifu_r_data,
  output        io_ifu_r_valid,
  input         io_ifu_r_ready,
  input  [31:0] io_lsu_aw_addr,
  input  [2:0]  io_lsu_aw_size,
  input         io_lsu_aw_valid,
  output        io_lsu_aw_ready,
  input  [31:0] io_lsu_w_data,
  input  [3:0]  io_lsu_w_strb,
  input         io_lsu_w_last,
  input         io_lsu_w_valid,
  output        io_lsu_w_ready,
  output [1:0]  io_lsu_b_resp,
  output        io_lsu_b_valid,
  input         io_lsu_b_ready,
  input  [31:0] io_lsu_ar_addr,
  input  [2:0]  io_lsu_ar_size,
  input         io_lsu_ar_valid,
  output        io_lsu_ar_ready,
  output [31:0] io_lsu_r_data,
  output [1:0]  io_lsu_r_resp,
  output        io_lsu_r_valid,
  input         io_lsu_r_ready,
  output [31:0] io_axi_aw_addr,
  output [2:0]  io_axi_aw_size,
  output        io_axi_aw_valid,
  input         io_axi_aw_ready,
  output [31:0] io_axi_w_data,
  output [3:0]  io_axi_w_strb,
  output        io_axi_w_last,
  output        io_axi_w_valid,
  input         io_axi_w_ready,
  input  [1:0]  io_axi_b_resp,
  input         io_axi_b_valid,
  output        io_axi_b_ready,
  output [31:0] io_axi_ar_addr,
  output [2:0]  io_axi_ar_size,
  output        io_axi_ar_valid,
  input         io_axi_ar_ready,
  input  [31:0] io_axi_r_data,
  input  [1:0]  io_axi_r_resp,
  input         io_axi_r_valid,
  output        io_axi_r_ready,
  input         io_ifu_handshake_valid,
  output        io_ifu_handshake_ready,
  input         io_lsu_handshake_valid,
  output        io_lsu_handshake_ready,
  output [1:0]  io_Arbiter_state_debug
);

  reg         state;
  wire        _GEN = state & io_ifu_handshake_valid;
  wire        _GEN_0 = ~state | io_ifu_handshake_valid | ~io_lsu_handshake_valid;
  wire [31:0] _GEN_1 = io_lsu_handshake_valid ? io_lsu_ar_addr : 32'h0;
  wire [31:0] _GEN_2 = io_ifu_handshake_valid ? io_ifu_ar_addr : _GEN_1;
  wire        _GEN_3 =
    io_ifu_handshake_valid ? io_ifu_ar_valid : io_lsu_handshake_valid & io_lsu_ar_valid;
  wire        _GEN_4 =
    io_ifu_handshake_valid ? io_ifu_r_ready : io_lsu_handshake_valid & io_lsu_r_ready;
  always @(posedge clock) begin
    if (reset)
      state <= 1'h0;
    else if (state)
      state <= io_ifu_handshake_valid | io_lsu_handshake_valid;
    else
      state <= io_ifu_handshake_valid | io_lsu_handshake_valid;
  end // always @(posedge)
  assign io_ifu_ar_ready = state & _GEN & io_axi_ar_ready;
  assign io_ifu_r_data = state & _GEN ? io_axi_r_data : 32'h0;
  assign io_ifu_r_valid = state & _GEN & io_axi_r_valid;
  assign io_lsu_aw_ready =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_axi_aw_ready;
  assign io_lsu_w_ready =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_axi_w_ready;
  assign io_lsu_b_resp = _GEN_0 ? 2'h0 : io_axi_b_resp;
  assign io_lsu_b_valid =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_axi_b_valid;
  assign io_lsu_ar_ready =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_axi_ar_ready;
  assign io_lsu_r_data = _GEN_0 ? 32'h0 : io_axi_r_data;
  assign io_lsu_r_resp = _GEN_0 ? 2'h0 : io_axi_r_resp;
  assign io_lsu_r_valid =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_axi_r_valid;
  assign io_axi_aw_addr = _GEN_0 ? 32'h0 : io_lsu_aw_addr;
  assign io_axi_aw_size = _GEN_0 ? 3'h2 : io_lsu_aw_size;
  assign io_axi_aw_valid =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_lsu_aw_valid;
  assign io_axi_w_data = _GEN_0 ? 32'h0 : io_lsu_w_data;
  assign io_axi_w_strb = _GEN_0 ? 4'h0 : io_lsu_w_strb;
  assign io_axi_w_last =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_lsu_w_last;
  assign io_axi_w_valid =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_lsu_w_valid;
  assign io_axi_b_ready =
    state & ~io_ifu_handshake_valid & io_lsu_handshake_valid & io_lsu_b_ready;
  assign io_axi_ar_addr = state ? _GEN_2 : 32'h0;
  assign io_axi_ar_size = _GEN_0 ? 3'h2 : io_lsu_ar_size;
  assign io_axi_ar_valid = state & _GEN_3;
  assign io_axi_r_ready = state & _GEN_4;
  assign io_ifu_handshake_ready = ~state;
  assign io_lsu_handshake_ready = ~state;
  assign io_Arbiter_state_debug = {1'h0, state};
endmodule

