// Generated by CIRCT firtool-1.62.0
module LSU(
  input         clock,
  input         reset,
  output        io_in_ready,
  input         io_in_valid,
  input  [31:0] io_in_bits_inst,
  input  [31:0] io_in_bits_pc,
  input  [31:0] io_in_bits_dmem_addr,
  input  [31:0] io_in_bits_result,
  input  [31:0] io_in_bits_rs2_data,
  input  [4:0]  io_in_bits_wb_addr,
  input         io_out_ready,
  output        io_out_valid,
  output [31:0] io_out_bits_inst,
  output [31:0] io_out_bits_pc,
  output [31:0] io_out_bits_dmem_rdata,
  output [31:0] io_out_bits_result,
  output [4:0]  io_out_bits_wb_addr,
  output        io_lsu_axi_resp_err,
  output [31:0] io_memory_aw_addr,
  output [2:0]  io_memory_aw_size,
  output        io_memory_aw_valid,
  input         io_memory_aw_ready,
  output [31:0] io_memory_w_data,
  output [3:0]  io_memory_w_strb,
  output        io_memory_w_last,
  output        io_memory_w_valid,
  input         io_memory_w_ready,
  input  [1:0]  io_memory_b_resp,
  input         io_memory_b_valid,
  output        io_memory_b_ready,
  output [31:0] io_memory_ar_addr,
  output [2:0]  io_memory_ar_size,
  output        io_memory_ar_valid,
  input         io_memory_ar_ready,
  input  [31:0] io_memory_r_data,
  input  [1:0]  io_memory_r_resp,
  input         io_memory_r_valid,
  output        io_memory_r_ready,
  output        io_arbiter_valid,
  input         io_arbiter_ready,
  output [2:0]  io_lsu_state_debug,
  output        io_lsu_is_ld_or_st_debug,
  output [31:0] io_lsu_reg_inst_debug,
  output [31:0] io_dmem_wdata_debug,
  output [31:0] io_dmem_rdata_debug,
  output [31:0] io_lsu_reg_dmem_addr_debug
);

  wire        isStore;
  wire        isLoad;
  wire [7:0]  _memory_ctl_io_wmask;
  wire [31:0] _memory_ctl_io_dmem_wdata;
  wire [2:0]  _memory_ctl_io_dmem_rw_size;
  wire [31:0] _alignment_network_io_data_out;
  reg  [31:0] lsu_reg_inst;
  reg  [31:0] lsu_reg_pc;
  reg  [31:0] lsu_reg_dmem_addr;
  reg  [31:0] lsu_reg_result;
  reg  [31:0] lsu_reg_rs2_data;
  reg  [4:0]  lsu_reg_wb_addr;
  wire [9:0]  _mem_access_control_T = {lsu_reg_inst[6:0], lsu_reg_inst[14:12]};
  wire [1:0]  _mem_access_control_T_12 =
    _mem_access_control_T == 10'h18 ? 2'h0 : {_mem_access_control_T == 10'h1A, 1'h0};
  wire [2:0]  _mem_access_control_T_14 =
    _mem_access_control_T == 10'h1C ? 3'h4 : {1'h0, _mem_access_control_T_12};
  wire [2:0]  _mem_access_control_T_16 =
    _mem_access_control_T == 10'h19 ? 3'h1 : _mem_access_control_T_14;
  wire [2:0]  _mem_access_control_T_18 =
    _mem_access_control_T == 10'h1D ? 3'h5 : _mem_access_control_T_16;
  wire [2:0]  _mem_access_control_T_20 =
    _mem_access_control_T == 10'h11A ? 3'h2 : _mem_access_control_T_18;
  wire [2:0]  _mem_access_control_T_22 =
    _mem_access_control_T == 10'h118 ? 3'h0 : _mem_access_control_T_20;
  wire [2:0]  mem_access_control =
    _mem_access_control_T == 10'h119 ? 3'h1 : _mem_access_control_T_22;
  reg  [31:0] delayedData;
  reg  [2:0]  state;
  wire        _GEN = state == 3'h0;
  wire        _GEN_0 = state == 3'h1;
  wire        _GEN_1 = state == 3'h2;
  wire        _GEN_2 = ~isLoad & isStore;
  wire        _GEN_3 = _GEN | _GEN_0;
  wire        _GEN_4 = _GEN_3 | ~_GEN_1 | isLoad | ~isStore;
  wire        _GEN_5 = state == 3'h3;
  wire        _GEN_6 = _GEN_1 | _GEN_5;
  wire        _GEN_7 = _GEN_3 | ~(_GEN_6 & isLoad);
  wire        _GEN_8 = _GEN_3 | ~_GEN_1 & ~_GEN_5 | isLoad | ~isStore;
  wire        _GEN_9 = isStore & io_memory_b_valid;
  wire        _GEN_10 =
    isLoad
      ? io_memory_r_valid & ((&io_memory_r_resp) | io_memory_r_resp == 2'h2)
      : _GEN_9 & ((&io_memory_b_resp) | io_memory_b_resp == 2'h2);
  wire        _GEN_11 = _GEN_0 | _GEN_1;
  wire        _GEN_12 = _GEN | _GEN_11;
  wire        _GEN_13 = state == 3'h4;
  wire        io_in_ready_0 = _GEN & io_in_valid;
  wire        _GEN_14 =
    _GEN_1 ? lsu_reg_inst[6:0] == 7'h3 : _GEN_5 & lsu_reg_inst[6:0] == 7'h3;
  assign isLoad = ~_GEN_3 & _GEN_14;
  wire        _GEN_15 =
    _GEN_1 ? lsu_reg_inst[6:0] == 7'h23 : _GEN_5 & lsu_reg_inst[6:0] == 7'h23;
  assign isStore = ~_GEN_3 & _GEN_15;
  wire        io_memory_w_valid_0 = ~_GEN_3 & _GEN_1 & _GEN_2;
  wire        _GEN_16 = _GEN_6 ? _GEN_2 : _GEN_13;
  wire        _GEN_17 = isLoad ? io_memory_r_valid : _GEN_9;
  always @(posedge clock) begin
    if (io_in_ready_0 & io_in_valid) begin
      lsu_reg_inst <= io_in_bits_inst;
      lsu_reg_pc <= io_in_bits_pc;
      lsu_reg_dmem_addr <= io_in_bits_dmem_addr;
      lsu_reg_result <= io_in_bits_result;
      lsu_reg_rs2_data <= io_in_bits_rs2_data;
      lsu_reg_wb_addr <= io_in_bits_wb_addr;
    end
    if (reset) begin
      delayedData <= 32'h0;
      state <= 3'h0;
    end
    else begin
      delayedData <= _alignment_network_io_data_out;
      if (_GEN) begin
        if (io_in_valid)
          state <= 3'h1;
      end
      else if (_GEN_0) begin
        if (io_arbiter_ready)
          state <= 3'h2;
      end
      else if (_GEN_1) begin
        if (isLoad) begin
          if (io_memory_ar_ready)
            state <= 3'h3;
        end
        else if (isStore) begin
          if (io_memory_aw_ready & io_memory_w_ready)
            state <= 3'h3;
        end
        else
          state <= 3'h4;
      end
      else if (_GEN_5) begin
        if (_GEN_17)
          state <= 3'h4;
      end
      else if (_GEN_13 & io_out_ready)
        state <= 3'h0;
    end
  end // always @(posedge)
  AlignmentNetwork alignment_network (
    .io_data_in   (io_memory_r_data),
    .io_dmem_addr (lsu_reg_dmem_addr),
    .io_control   (mem_access_control),
    .io_data_out  (_alignment_network_io_data_out)
  );
  MemoryController memory_ctl (
    .io_dmem_addr      (lsu_reg_dmem_addr),
    .io_dmem_wdata_raw (lsu_reg_rs2_data),
    .io_control        (mem_access_control),
    .io_wmask          (_memory_ctl_io_wmask),
    .io_dmem_wdata     (_memory_ctl_io_dmem_wdata),
    .io_dmem_rw_size   (_memory_ctl_io_dmem_rw_size)
  );
  assign io_in_ready = io_in_ready_0;
  assign io_out_valid = ~(_GEN | _GEN_0 | _GEN_1 | _GEN_5) & _GEN_13;
  assign io_out_bits_inst = lsu_reg_inst;
  assign io_out_bits_pc = lsu_reg_pc;
  assign io_out_bits_dmem_rdata = delayedData;
  assign io_out_bits_result = lsu_reg_result;
  assign io_out_bits_wb_addr = lsu_reg_wb_addr;
  assign io_lsu_axi_resp_err = ~_GEN_12 & _GEN_5 & _GEN_10;
  assign io_memory_aw_addr = _GEN_8 ? 32'h0 : lsu_reg_dmem_addr;
  assign io_memory_aw_size = _GEN_8 ? 3'h2 : _memory_ctl_io_dmem_rw_size;
  assign io_memory_aw_valid = io_memory_w_valid_0;
  assign io_memory_w_data = _GEN_4 ? 32'h0 : _memory_ctl_io_dmem_wdata;
  assign io_memory_w_strb = _GEN_4 ? 4'h0 : _memory_ctl_io_wmask[3:0];
  assign io_memory_w_last = _GEN | ~_GEN_0 & _GEN_16;
  assign io_memory_w_valid = io_memory_w_valid_0;
  assign io_memory_b_ready = ~_GEN_12 & _GEN_5 & _GEN_2;
  assign io_memory_ar_addr = _GEN_7 ? 32'h0 : lsu_reg_dmem_addr;
  assign io_memory_ar_size = _GEN_7 ? 3'h2 : _memory_ctl_io_dmem_rw_size;
  assign io_memory_ar_valid = ~_GEN_3 & _GEN_1 & isLoad;
  assign io_memory_r_ready = ~_GEN_12 & _GEN_5 & isLoad;
  assign io_arbiter_valid = ~_GEN & (_GEN_11 | _GEN_5);
  assign io_lsu_state_debug = state;
  assign io_lsu_is_ld_or_st_debug = isLoad | isStore;
  assign io_lsu_reg_inst_debug = lsu_reg_inst;
  assign io_dmem_wdata_debug = _memory_ctl_io_dmem_wdata;
  assign io_dmem_rdata_debug = io_memory_r_data;
  assign io_lsu_reg_dmem_addr_debug = lsu_reg_dmem_addr;
endmodule

