1. 
状态 1（初始化）：设定初始值 sum = 0, i = 1
状态 2（计算）：每次将 i 加到 sum 中，并递增 i。如果 i <= 100，继续循环，否则结束。
状态 3（结束）：输出 sum 的值，计算结束。
状态转换条件：

初始状态 -> 计算状态：i = 1，sum = 0
计算状态 -> 计算状态：i <= 100
计算状态 -> 结束状态：i > 100
2.              
需要编译500次NEMU才能完成PA
其中90%用于调试，等于450次调试。
没有简易调试器时，每次调试需要通过GDB获取20个信息，每个信息30秒，总计 20 * 30 = 600秒，即10分钟来排除一个bug。
没有简易调试器的时间： 450次调试 × 10分钟/调试 = 4500分钟 = 75小时

有简易调试器的时间： 假设通过简易调试器只需获取相同信息10秒，总计20个信息 × 10秒 = 200秒，即3.33分钟。 450次调试 × 3.33分钟/调试 = 1499分钟 = 24.98小时

节省的时间： 75小时 - 24.98小时 = 50.02小时

所以使用简易调试器能节省大约50小时。

3. RTFM：RISC-V32手册相关问题
RISC-V32有哪几种指令格式：RISC-V有6种基本指令格式：R型、I型、S型、B型、U型和J型。
LUI指令的行为是什么：LUI（Load Upper Immediate）指令将一个20位立即数加载到寄存器的高位部分（左移12位），低位部分填充为0。
mstatus寄存器的结构是怎么样的：mstatus寄存器用于保存处理器的状态信息，包含控制中断、特权模式等字段，如MIE、MPIE等位。

4. shell命令：统计代码行数
要统计 nemu/ 目录下所有 .c 和 .h 文件的总行数
find nemu/ -name "*.c" -o -name "*.h" | xargs wc -l
要排除空行，可以使用：
find nemu/ -name "*.c" -o -name "*.h" | xargs grep -v "^\s*$" | wc -l

7. RTFM：GCC编译选项
-Wall：开启所有警告信息，这有助于发现潜在的错误。
-Werror：将所有警告视为错误，使编译无法继续。这强制开发者修复所有潜在问题，从而提高代码质量。
这些选项的作用是帮助程序员在编译阶段尽早发现和修复问题，确保代码的健壮性。
